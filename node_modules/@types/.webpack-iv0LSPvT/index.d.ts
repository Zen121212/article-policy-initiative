/// <reference types="node" />

import * as anymatch from "anymatch";
import { Hash as CryptoHash } from "crypto";
import { RawSourceMap } from "source-map";
import {
    AsyncParallelBailHook,
    AsyncParallelHook,
    AsyncSeriesBailHook,
    AsyncSeriesHook,
    AsyncSeriesWaterfallHook,
    HookMap,
    SyncBailHook,
    SyncHook,
    SyncLoopHook,
    SyncWaterfallHook,
    Tapable,
} from "tapable";
import * as UglifyJS from "uglify-js";
import { ConcatSource, Source } from "webpack-sources";

export = webpack;

declare function webpack(
    options:
        | webpack.Configuration
        | webpack.ConfigurationFactory,
    handler: webpack.Compiler.Handler,
): webpack.Compiler.Watching | webpack.Compiler;
declare function webpack(options?: webpack.Configuration): webpack.Compiler;

declare function webpack(
    options:
        | webpack.Configuration[]
        | webpack.MultiConfigurationFactory,
    handler: webpack.MultiCompiler.Handler,
): webpack.MultiWatching | webpack.MultiCompiler;
declare function webpack(options: webpack.Configuration[]): webpack.MultiCompiler;

declare namespace webpack {
    /** Webpack package version. */
    const version: string | undefined;

    interface Configuration {
        /** Enable production optimizations or development hints. */
        mode?: "development" | "production" | "none" | undefined;
        /** Name of the configuration. Used when loading multiple configurations. */
        name?: string | undefined;
        /**
         * The base directory (absolute path!) for resolving the `entry` option.
         * If `output.pathinfo` is set, the included pathinfo is shortened to this directory.
         */
        context?: string | undefined;
        entry?: string | string[] | Entry | EntryFunc | undefined;
        /** Choose a style of source mapping to enhance the debugging process. These values can affect build and rebuild speed dramatically. */
        devtool?: Options.Devtool | undefined;
        /** Options affecting the output. */
        output?: Output | undefined;
        /** Options affecting the normal modules (NormalModuleFactory) */
        module?: Module | undefined;
        /** Options affecting the resolving of modules. */
        resolve?: Resolve | undefined;
        /** Like resolve but for loaders. */
        resolveLoader?: ResolveLoader | undefined;
        /**
         * Specify dependencies that shouldn’t be resolved by webpack, but should become dependencies of the resulting bundle.
         * The kind of the dependency depends on output.libraryTarget.
         */
        externals?: ExternalsElement | ExternalsElement[] | undefined;
        /**
         * - "web" Compile for usage in a browser-like environment (default).
         * - "webworker" Compile as WebWorker.
         * - "node" Compile for usage in a node.js-like environment (use require to load chunks).
         * - "async-node" Compile for usage in a node.js-like environment (use fs and vm to load chunks async).
         * - "node-webkit" Compile for usage in webkit, uses jsonp chunk loading but also supports builtin node.js modules plus require(“nw.gui”) (experimental)
         * - "atom" Compile for usage in electron (formerly known as atom-shell), supports require for modules necessary to run Electron.
         * - "electron-renderer" Compile for Electron for renderer process, providing a target using JsonpTemplatePlugin, FunctionModulePlugin for browser
         *   environments and NodeTargetPlugin and ExternalsPlugin for CommonJS and Electron built-in modules.
         * - "electron-preload" Compile for Electron for renderer process, providing a target using NodeTemplatePlugin with asyncChunkLoading set to true,
         *   FunctionModulePlugin for browser environments and NodeTargetPlugin and ExternalsPlugin for CommonJS and Electron built-in modules.
         * - "electron-main" Compile for Electron for main process.
         * - "atom" Alias for electron-main.
         * - "electron" Alias for electron-main.
         */
        target?:
            | "web"
            | "webworker"
            | "node"
            | "async-node"
            | "node-webkit"
            | "atom"
            | "electron"
            | "electron-renderer"
            | "electron-preload"
            | "electron-main"
            | ((compiler?: any) => void)
            | undefined;
        /** Report the first error as a hard error instead of tolerating it. */
        bail?: boolean | undefined;
        /** Capture timing information for each module. */
        profile?: boolean | undefined;
        /** Cache generated modules and chunks to improve performance for multiple incremental builds. */
        cache?: boolean | object | undefined;
        /** Enter watch mode, which rebuilds on file change. */
        watch?: boolean | undefined;
        watchOptions?: Options.WatchOptions | undefined;
        /** Include polyfills or mocks for various node stuff */
        node?: Node | false | undefined;
        /** Set the value of require.amd and define.amd. */
        amd?: { [moduleName: string]: boolean } | undefined;
        /** Used for recordsInputPath and recordsOutputPath */
        recordsPath?: string | undefined;
        /** Load compiler state from a json file. */
        recordsInputPath?: string | undefined;
        /** Store compiler state to a json file. */
        recordsOutputPath?: string | undefined;
        /** Add additional plugins to the compiler. */
        plugins?: Plugin[] | undefined;
        /** Stats options for logging  */
        stats?: Options.Stats | undefined;
        /** Performance options */
        performance?: Options.Performance | false | undefined;
        /** Limit the number of parallel processed modules. Can be used to fine tune performance or to get more reliable profiling results */
        parallelism?: number | undefined;
        /** Optimization options */
        optimization?: Options.Optimization | undefined;
        /** Options for infrastructure level logging */
        infrastructureLogging?: Options.InfrastructureLogging | undefined;
    }

    interface CliConfigOptions {
        config?: string | undefined;
        mode?: Configuration["mode"] | undefined;
        env?: string | undefined;
        "config-register"?: string | undefined;
        configRegister?: string | undefined;
        "config-name"?: string | undefined;
        configName?: string | undefined;
    }

    type ConfigurationFactory = (
        env: string | Record<string, boolean | number | string> | undefined,
        args: CliConfigOptions,
    ) => Configuration | Promise<Configuration>;

    type MultiConfigurationFactory = (
        env: string | Record<string, boolean | number | string> | undefined,
        args: CliConfigOptions,
    ) => Configuration[] | Promise<Configuration[]>;

    interface Entry {
        [name: string]: string | string[];
    }

    type EntryFunc = () => string | string[] | Entry | Promise<string | string[] | Entry>;

    interface DevtoolModuleFilenameTemplateInfo {
        identifier: string;
        shortIdentifier: string;
        resource: any;
        resourcePath: string;
        absoluteResourcePath: string;
        allLoaders: any[];
        query: string;
        moduleId: string;
        hash: string;
    }

    interface Output {
        /** When used in tandem with output.library and output.libraryTarget, this option allows users to insert comments within the export wrapper. */
        auxiliaryComment?: string | AuxiliaryCommentObject | undefined;
        /** The filename of the entry chunk as relative path inside the output.path directory. */
        filename?: string | ((chunkData: ChunkData) => string) | undefined;
        /** The filename of non-entry chunks as relative path inside the output.path directory. */
        chunkFilename?: string | undefined;
        /** Number of milliseconds before chunk request expires, defaults to 120,000. */
        chunkLoadTimeout?: number | undefined;
        /** This option enables cross-origin loading of chunks. */
        crossOriginLoading?: string | boolean | undefined;
        /** The JSONP function used by webpack for asnyc loading of chunks. */
        jsonpFunction?: string | undefined;
        /** Allows customization of the script type webpack injects script tags into the DOM to download async chunks. */
        jsonpScriptType?: "text/javascript" | "module" | undefined;
        /** Filename template string of function for the sources array in a generated SourceMap. */
        devtoolModuleFilenameTemplate?: string | ((info: DevtoolModuleFilenameTemplateInfo) => string) | undefined;
        /** Similar to output.devtoolModuleFilenameTemplate, but used in the case of duplicate module identifiers. */
        devtoolFallbackModuleFilenameTemplate?:
            | string
            | ((info: DevtoolModuleFilenameTemplateInfo) => string)
            | undefined;
        /**
         * Enable line to line mapped mode for all/specified modules.
         * Line to line mapped mode uses a simple SourceMap where each line of the generated source is mapped to the same line of the original source.
         * It’s a performance optimization. Only use it if your performance need to be better and you are sure that input lines match which generated lines.
         * true enables it for all modules (not recommended)
         */
        devtoolLineToLine?: boolean | undefined;
        /** This option determines the modules namespace used with the output.devtoolModuleFilenameTemplate. */
        devtoolNamespace?: string | undefined;
        /** The filename of the Hot Update Chunks. They are inside the output.path directory. */
        hotUpdateChunkFilename?: string | undefined;
        /** The JSONP function used by webpack for async loading of hot update chunks. */
        hotUpdateFunction?: string | undefined;
        /** The filename of the Hot Update Main File. It is inside the output.path directory. */
        hotUpdateMainFilename?: string | undefined;
        /** If set, export the bundle as library. output.library is the name. */
        library?: string | string[] | { [key: string]: string } | undefined;
        /**
         * Which format to export the library:
         * - "var" - Export by setting a variable: var Library = xxx (default)
         * - "this" - Export by setting a property of this: this["Library"] = xxx
         * - "commonjs" - Export by setting a property of exports: exports["Library"] = xxx
         * - "commonjs2" - Export by setting module.exports: module.exports = xxx
         * - "amd" - Export to AMD (optionally named)
         * - "umd" - Export to AMD, CommonJS2 